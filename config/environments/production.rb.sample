Rails.application.configure do

  SmartEnv.set :PUBLIC_HOST, default: 'http://chouette-core.enroute.mobi'
  SmartEnv.add_boolean :ACCEPT_USER_CREATION, default: false
  SmartEnv.set :IEV_URL, default: 'http://iev:8080'

  SmartEnv.set :RAILS_HOST, default: 'http://front:3000'
  SmartEnv.set :RAILS_DB_PASSWORD, required: true
  SmartEnv.add :AUTH_SETTINGS, default: { type: 'database' }
  SmartEnv.add_boolean :RAILS_SERVE_STATIC_FILES, default: true

  SmartEnv.add :MAIL_DELIVERY_METHOD, default: 'smtp'
  SmartEnv.add :SMTP_HOST
  SmartEnv.add :SMTP_SETTINGS, default: {}

  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.cache_classes = true

  # Eager load code on boot. This eager loads most of Rails and
  # your application in memory, allowing both threaded web servers
  # and those relying on copy on write to perform better.
  # Rake tasks automatically ignore this option for performance.
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local       = false
  config.action_controller.perform_caching = true

  # Ensures that a master key has been made available in either ENV["RAILS_MASTER_KEY"]
  # or in config/master.key. This key is used to decrypt credentials (and other encrypted files).
  # config.require_master_key = true

  # Disable serving static files from the `/public` folder by default since
  # Apache or NGINX already handles this.
  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?

  # Compress JavaScripts and CSS.
  config.assets.js_compressor = :uglifier
  # config.assets.css_compressor = :sass

  # Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = false

  # Generate digests for assets URLs.
  config.assets.digest = true

  # `config.assets.precompile` and `config.assets.version` have moved to config/initializers/assets.rb

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.action_controller.asset_host = 'http://assets.example.com'

  # Specifies the header that your server uses for sending files.
  # config.action_dispatch.x_sendfile_header = 'X-Sendfile' # for Apache
  # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for NGINX

  # Store uploaded files on the local file system (see config/storage.yml for options)
  config.active_storage.service = :local

  # Mount Action Cable outside main process or domain
  # config.action_cable.mount_path = nil
  # config.action_cable.url = 'wss://example.com/cable'
  # config.action_cable.allowed_request_origins = [ 'http://example.com', /http:\/\/example.*/ ]

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true
  # All our platforms are only accessible via https. But redirection will break internal APIs
  config.ssl_options = { redirect: false }

  # Use the lowest log level to ensure availability of diagnostic information
  # when problems arise.
  config.log_level = :info

  # Prepend all log lines with the following tags.
  config.log_tags = [ :request_id ]

  # Use a different cache store in production.
  # config.cache_store = :mem_cache_store
  if SmartEnv['REDIS_URL'].present?
    config.cache_store = :redis_cache_store, { url: SmartEnv['REDIS_URL'], expires_in: 90.minutes }
  end

  # Use a real queuing backend for Active Job (and separate queues per environment)
  # config.active_job.queue_adapter     = :resque
  # config.active_job.queue_name_prefix = "chouette_ihm_#{Rails.env}"

  config.action_mailer.perform_caching = false

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Send deprecation notices to registered listeners.
  config.active_support.deprecation = :notify

  # Use default logging formatter so that PID and timestamp are not suppressed.
  config.log_formatter = ::Logger::Formatter.new

  # Use a different logger for distributed setups.
  # require 'syslog/logger'
  # config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new 'app-name')
  if ENV["RAILS_LOG_TO_STDOUT"].present?
    config.rails_semantic_logger.format = :json
    config.colorize_logging = false

    $stdout.sync = true

    ignore_controllers = %w[
      NotificationsController
      HealthCheck::HealthCheckController
    ].freeze
    config.semantic_logger.add_appender(
      io: $stdout,
      formatter: SemanticLogger::Formatters::Json.new(log_host: false),
      filter: ->(log) { !ignore_controllers.include?(log.name) }
    )
  end

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  config.action_mailer.default_url_options = { host: SmartEnv['PUBLIC_HOST'] }

  # Configure the e-mail address which will be shown in Devise::Mailer
  config.mailer_sender = SmartEnv['MAIL_FROM']
  config.action_mailer.default_options = { from: SmartEnv['MAIL_FROM'] }
  config.action_mailer.smtp_settings =
    if SmartEnv['SMTP_SETTINGS'].present?
      SmartEnv.hash('SMTP_SETTINGS')
    else
      { address: SmartEnv['SMTP_HOST'] } if SmartEnv['SMTP_HOST']
    end
  config.action_mailer.asset_host    = SmartEnv['PUBLIC_HOST']
  config.action_mailer.delivery_method = SmartEnv['MAIL_DELIVERY_METHOD'].to_sym
  config.action_mailer.default charset: 'utf-8'

  # See #8823
  config.chouette_email_user = SmartEnv.boolean('CHOUETTE_EMAIL_USER')
  config.chouette_email_whitelist = SmartEnv.array('CHOUETTE_EMAIL_WHITELIST')
  config.chouette_email_blacklist = SmartEnv.array('CHOUETTE_EMAIL_BLACKLIST')

  config.chouette_authentication_settings = SmartEnv.hash('AUTH_SETTINGS')

  config.to_prepare do
    Devise::Mailer.layout "mailer"
  end

  config.i18n.available_locales = [:fr, :en]
end
