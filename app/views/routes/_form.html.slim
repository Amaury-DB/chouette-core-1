= simple_form_for [@referential, @line, @route] do |f|
  .row
    .col-lg-4.col-md-4.col-sm-4.col-xs-4
      = f.input :name
    .col-lg-4.col-md-4.col-sm-4.col-xs-4
      = f.input :published_name
    .col-lg-4.col-md-4.col-sm-4.col-xs-4
      = f.input :number

  .row
    .col-lg-6.col-md-6.col-sm-5.col-xs-5
      = f.input :comment
    .col-lg-6.col-md-6.col-sm-7.col-xs-7
      = f.input :opposite_route, collection: @line.routes.select { |r| r.id != @route.id }

  .row
    .col-lg-4.col-md-4.col-sm-4.col-xs-4
      = f.input :direction, include_blank: false
    .col-lg-4.col-md-4.col-sm-4.col-xs-4
      = f.input :wayback, include_blank: false
    .col-lg-4.col-md-4.col-sm-4.col-xs-4
      = f.input :objectid, required: !@route.new_record?, input_html: { title: t("formtastic.titles#{format_restriction_for_locales(@referential)}.route.objectid") }

  .row style="margin-top:20px"
    .col-lg-12.col-md-12.col-sm-12.col-xs-12
      #stop_points
      /   div.clearfix style="margin-bottom:5px"
      /     label style="margin:0" ArrÃªts
      /     .btn.btn-primary.btn-xs.pull-right data-event="add_stop_point"
      /       span.fa.fa-plus
      /       = " #{t('routes.actions.add_stop_point')}"

          / = link_to_add_association f, :stop_points, class: 'btn btn-primary btn-xs pull-right' do
          /   span.fa.fa-plus
          /   = " #{t('routes.actions.add_stop_point')}"
          / THIS IS BROKEN
          / = link_to t('routes.actions.new_stop_point'), new_referential_stop_area_path(@referential), target: '_blank'

        / .list-group
        /   = f.simple_fields_for :stop_points do |point|
        /     = render 'stop_point_fields', f: point

  .row
    .col-lg-12.col-md-12.col-sm-12.col-xs-12.text-right
      = link_to 'Annuler', :back, class: 'btn btn-link'
      = f.button :submit, class: 'btn btn-danger'

// Get JSON data for route stop points
= javascript_tag do
  | window.itinerary_stop = "#{URI.escape(@route.stop_areas.all.to_json)}"

/ StopPoints Reactux component
= javascript_include_tag 'es6_browserified/stop_points.js'
= semantic_form_for [@referential, @line, @route] do |form|
  = form.inputs do
    = form.input :name
    = form.input :published_name
    = form.input :number
    = form.input :comment
    = form.input :opposite_route, as: :select, :collection => @line.routes.select { |r| r.id != @route.id }
    = form.input :direction, :include_blank => false
    = form.input :wayback, :include_blank => false
    = form.input :objectid, :required => !@route.new_record?, :input_html => { :title => t("formtastic.titles#{format_restriction_for_locales(@referential)}.route.objectid")}

  #stop_points
    = form.semantic_fields_for :stop_points, :include_id => false do |p|
      == render "stop_point_fields",  f: p

    .links
      = link_to_add_association t("routes.actions.add_stop_point"), form, :stop_points, class: 'add_stop_point add'
      br
      = link_to t('routes.actions.new_stop_point'), new_referential_stop_area_path(@referential), { class: 'add', target: '_blank' }

  = form.actions do
    = form.action :submit, as: :button
    = form.action :cancel, as: :link

javascript:
  $(document).ready(function() {
    var stop_point_ids = [];

    var order_position = function() {
      $('#stop_points input[type="hidden"][id$="position"]').each(function(index) {
        $(this).val(index);
      });
    };

    var write_stop_point_ids = function(){
      $('#stop_points input[type="hidden"][class~="stop_point_id"]').each(function(index,element) {
        // soit le parent a la classe added_stop_point
          if ( $(element).hasClass("added_stop_point") ){
            $(this).attr("value", "");
          } else {
            $(this).attr("value", stop_point_ids.shift());
          }
      });
    }

    var empty_stop_point_ids = function() {
      stop_point_ids = $.map($('#stop_points input[type="hidden"][class="stop_point_id"]'), function(element, index) {
        return $(element).val();
      });
      // console.log(  "before-remove");
      // console.log(  stop_point_ids);
    };

    $('#stop_points').sortable({
      axis: 'y',
      dropOnEmpty: false,
      handle: '.handle',
      cursor: 'crosshair',
      items: '.stop_point',
      opacity: 0.4,
      scroll: true,
      start: function( event, ui ) {
        empty_stop_point_ids();
      },
      update: function( event, ui ) {
        write_stop_point_ids();
        order_position();
      }
    });

    $('#stop_points').bind("cocoon:after-insert", function(event, insertedItem) {
      var new_stop_count = $('div.nested-fields.stop_point').size();
      var cocoonId = insertedItem.find("input.new_stop_point").attr("id").match( /route_stop_points_attributes_(\d+)_stop_area_id/)[1];
      insertedItem.find('input').each( function(index,e){
        var old = $(e).attr("name");
        if (old!=undefined) {
          $(e).attr("name", old.replace( cocoonId, new_stop_count - 1));
        }
      });

      //console.log( "cocoonId="+cocoonId+", new_stop_count="+new_stop_count);
      order_position();
    });

    $('#stop_points').on("cocoon:before-remove", empty_stop_point_ids);

    $('#stop_points').on("cocoon:after-remove", function() {
      write_stop_point_ids();
      order_position();
    });
  });
