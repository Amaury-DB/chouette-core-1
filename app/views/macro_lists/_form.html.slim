// - content_for :additional_packs, 'macro_lists/form'
- form_options = local_assigns.fetch(:options, {})

= simple_form_for [@workbench, @macro_list], facade.form_options.merge(form_options) do |f|
  .row
    .col-lg-12
      = f.input :name
      = f.input :comments, as: :text
  .row
    h2
      = t("macro.form.sections.macros")
    .simple-separator.mb-5
    .w-full-px-5
      div.macros[x-data="{new_child: '', children_count: #{@macro_list.macro_contexts.count}}"]
        div[x-ref="children"]
          = render partial: "macro_context", collection: @macro_list.macro_contexts, locals: { form: f }

        .flex.flex-col.items-center.mt-5
          .flex.items-center.w-full.mb-8
            .w-full.mr-5
              = select_tag "macro_context_type",
                  options_for_select(Macro::Context.available.map { |macro_context_class| [macro_context_class.model_name.human, render(partial: "macro_context", locals: { macro_context: macro_context_class.new, form: f, template_mode: true })] }),
                  class: "form-control select required",
                  "x-model": "new_child",
                  include_blank: true
            button.btn.btn-primary x-on:click.prevent= "$refs.children.innerHTML += prepareForm(new_child, '#{f.object_name}', (children_count++) + 1)"
              = t("simple_form.buttons.macro_list.macro_context_type")

      = render partial: 'macros', locals: { macros: @macro_list.macros, form: f }

  - unless facade.show?
    = cancel_button
    = f.button :submit, t('actions.submit'), class: 'btn btn-default formSubmitr', form: 'macro_list_form'

  javascript:
    const macroForms = 
      #{Macro.available.map { |macro_class| [macro_class.name, render(partial: "macro", locals: { macro: macro_class.new, form: f, template_mode: true })] }.to_h.to_json.html_safe}

    function macroForm(macro_class) {
      return macroForms[macro_class]
    }

    function prepareForm(content, object_name, position) {
      console.log("Prepare form with object_name=" + object_name + " position=" + position)
      var new_id = new Date().getTime();

      content = content.replaceAll("new_scope[", object_name + "[");

      // transform macro_list[macro_contexts_attributes][1688537262383] in macro_list_macro_contexts_attributes_1688537262383_ 
      object_id = object_name.replaceAll("][","_").replaceAll("[","_").replaceAll("]","_")
      content = content.replaceAll("new_scope_", object_id);

      content = content.replaceAll("[new_child]", '[' + new_id + ']');
      content = content.replaceAll("_new_child_", '_' + new_id + '_');

      content = content.replace("new_position", position);

      return content;
    }