div
	.flex.flex-col.items-center.mt-5 x-data=("{ expanded: true }")
		.flex.items-center.w-full
			button @click="expanded = ! expanded" type="button" x-bind:disabled="macro.isDeleted" class="flex items-center justify-between p-3 pl-3 mr-3 w-10 font-bold text-white bg-enroute-chouette-green rounded cursor-pointer hover:text-indigo-100"
				<span class="text-3xl w-full" x-text="expanded ? '-' : '+'">+</span>
			.w-full
				= f.input :id, as: :hidden, input_html: { 'x-model': 'macro.id', ':name': "store.inputName(index, 'id')" }, wrapper: false
				= f.input :type, as: :hidden, input_html: { 'x-model': 'macro.type', ':name': "store.inputName(index, 'type')" }, wrapper: false
				= f.input :position, as: :hidden, input_html: { 'x-model': 'macro.position', ':value': 'index + 1', ':name': "store.inputName(index, 'position')" }, wrapper: false
				= f.input :_destroy, as: :hidden, input_html: { ':value': 'macro.isDeleted', ':name': "store.inputName(index, '_destroy')" }, wrapper: false

				= f.input :name, input_html: { 'x-model': 'macro.name', ':readonly': '!expanded || macro.isDeleted', ':name': "store.inputName(index, 'name')" }, label: false

			.btn-group
				.btn.dropdown-toggle data-toggle="dropdown"
					.span.fa.fa-cog
				ul.dropdown-menu
					template[x-for="action in store.actions"]
						li
							a @click="store[action](index)" x-text="I18n.t(`macros.actions.${action}`)" x-show="(action == 'restore' && macro.isDeleted) || (action != 'restore' && !macro.isDeleted)"

		.macro.flex.flex-col x-show="expanded && !macro.isDeleted" class="w-full"
			template[x-for="[optionName, params] in Object.entries(macro.options)"]
				div[x-data="{ inputName: store.inputName(index, optionName), hasError: !!macro.errors[optionName], error: (macro.errors[optionName] || [])[0] }"]
					= render 'macro_option_input'
