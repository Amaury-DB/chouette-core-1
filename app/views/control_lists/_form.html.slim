- read_only = local_assigns.fetch(:read_only, false)
- form_options = { wrapper: :horizontal_form_tailwind, html: { class: 'tailwind-form', id: 'control_list_form' } }
- form_options.merge!(defaults: { disabled: true }) if read_only

= simple_form_for [@workbench, @control_list], form_options do |f|
  .row.control_list
    .col-lg-12
      = f.input :name
      = f.input :comments, as: :text
      = f.input :shared, as: :switchable_checkbox
  .row
    h2
      = t("control.form.sections.controls")
    .simple-separator.mb-5
    .w-full-px-5
      div.control_contexts[x-data="{new_child: '', children_count: #{@control_list.control_contexts.count}}"]
        div[x-ref="children"]
          = render partial: "control_context", collection: @control_list.control_contexts, locals: { form: f, read_only: read_only }

        - unless read_only
            .flex.flex-col.items-center.mt-5
              .flex.items-center.w-full.mb-8
                .w-full.mr-5
                  = select_tag "control_context_type",
                      options_for_select(Control::Context.available.map { |control_context_class| [control_context_class.model_name.human, render(partial: "control_context", locals: { control_context: control_context_class.new(workbench: @workbench), form: f, template_mode: true })] }),
                      class: "form-control select required",
                      "x-model": "new_child",
                      include_blank: true
                button.btn.btn-primary x-on:click.prevent= "$refs.children.insertAdjacentHTML('beforeend', prepareForm(new_child, '#{f.object_name}', (children_count++) + 1))"
                  = t("simple_form.buttons.control_list.control_context_type")

      = render partial: 'controls', locals: { controls: @control_list.controls, form: f, read_only: read_only }

  - unless read_only
    = cancel_button
    = f.button :submit, t('actions.submit'), class: 'btn btn-default formSubmitr', form: 'control_list_form'

  javascript:
    const controlForms =
      #{Control.available.map { |control_class| [control_class.name, render(partial: "control", locals: { control: control_class.new, form: f, template_mode: true })] }.to_h.to_json.html_safe}

    function controlForm(control_class) {
      return controlForms[control_class]
    }

    function prepareForm(content, object_name, position) {
      var new_id = new Date().getTime();

      content = content.replaceAll("new_scope[", object_name + "[");

      // transform control_list[control_contexts_attributes][1688537262383] in control_list_control_contexts_attributes_1688537262383_
      object_id = object_name.replaceAll("][","_").replaceAll("[","_").replaceAll("]","_")
      content = content.replaceAll("new_scope_", object_id);

      content = content.replaceAll("[new_child]", '[' + new_id + ']');
      content = content.replaceAll("_new_child_", '_' + new_id + '_');

      content = content.replace("new_position", position);

      return content;
    }

    function reorderForm(parent) {
      $(parent).children().each(function(index, element) {
        $(element).find(':input').each (function(_, input) {
          // change the position input value
          if (input.name.endsWith("[position]")) {
            input.value = index + 1;
          }
        });
      });
    }