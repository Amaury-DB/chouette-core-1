/ PageHeader
= pageheader 'map-marker',
             @routing_constraint_zone.name,
             '',
             t('last_update', time: l(@routing_constraint_zone.updated_at, format: :short)) do

  / Below is secundary actions & optional contents
  .row
    .col-lg-12.text-right.mb-sm
      - @routing_constraint_zone.action_links.each do |link|
        = link_to link.href,
            method: link.method,
            data: link.data,
            class: 'btn btn-primary' do
              = link.content

/ PageContent
.page_content
  .container-fluid
    .row
      .col-lg-6.col-md-6.col-sm-12.col-xs-12
        = definition_list t('metadatas'),
          { @routing_constraint_zone.human_attribute_name(:name) => @routing_constraint_zone.try(:name),
            @routing_constraint_zone.human_attribute_name(:route) => link_to(@routing_constraint_zone.try(:route_name), [@referential, @line, @routing_constraint_zone.route]),
            @routing_constraint_zone.human_attribute_name(:line) => link_to(@line.name, [@referential, @line])}

    .row
      .col-lg-12
        = table_builder @routing_constraint_zone.route.stop_points,
          { "Arrêts de l'itinéraire" => 'name',
            "Arrêts inclus dans l'ITL" => Proc.new{ |rsp| (@routing_constraint_zone.stop_points.collect{|c| c.name}.include? rsp.name) ? 'Oui' : 'Non' } },
          [],
          [],
          'table has-stoppoints'
