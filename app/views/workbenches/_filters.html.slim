= simple_form_for @search, url: request.path, method: "GET", html: { class: 'flex items-center tailwind-filters bg-grey relative pr-6' }, wrapper: :filters_form_tailwind  do |f|
  = f.simple_fields_for :order, @search.order, defaults: { wrapper: false } do |form_order|
    - form_order.object.attributes.keys.each do |attribute|
      = form_order.input attribute, as: :hidden

  .flex.flex-col.w-full
    .flex.items-center.border-r.border-white
      = f.input :text, label: false, wrapper_html: {class: "w-2/5"}, placeholder: I18n.t('simple_form.placeholders.search.text')
    .flex.items-center.border-t.border-r.border-white
      = f.input :line, placeholder: I18n.t('simple_form.placeholders.search.line_id'), as: :tom_select, collection: @search.candidate_lines.map { |l| {id: l.id, text: l.display_name } }, wrapper_html: {class: "w-2/5"}
      / = f.input :states, placeholder: I18n.t('simple_form.placeholders.search.status'), as: :tom_select, collection: @search.candidate_lines.map { |l| {id: l.id, text: l.display_name } }, wrapper_html: {class: "w-2/5"}
      = f.input :states, as: :autocomplete_select, wrapper_html: {class: "w-1/5"}, input_html: { multiple: true, style: 'width: 100%' }
      = f.input :workbench, placeholder: I18n.t('simple_form.placeholders.search.workbench_ids'), as: :tom_select, collection: @search.candidate_workbenches.map { |l| {id: l.id, text: l.name } }, wrapper_html: {class: "w-2/5"}

    .flex.items-center.border-t.border-r.border-white
      / = f.input :valid_before_date, as: :date_picker
      / = f.input :valid_after_date, as: :date_picker

  .flex.flex-col.justify-center.items-center.actions.ml-auto.py-3.w-80
    .flex.items-center.mb-3
      = f.label :per_page, class: 'control-label mr-3'
      = f.input :per_page, as: :per_page, label: false, wrapper: false
    .flex.items-center
      = link_to t('actions.erase'), @workbench, class: 'btn btn-link'
      = f.submit t('actions.filter'), class: 'btn btn-default'

/ = search_form_for @q_for_form, url: workbench_path(@workbench.id), builder: SimpleForm::FormBuilder, class: 'form form-filter' do |f|
/   .ffg-row
/     .input-group.search_bar class=filter_item_class(params[:q], :name_cont)
/       = f.search_field :name_cont, class: 'form-control', placeholder: t('referentials.filters.name')
/       span.input-group-btn
/         button.btn.btn-default type='submit'
/           span.fa.fa-search

/   .ffg-row
/     .form-group class=filter_item_class(params[:q], :associated_lines_id_eq)
/       = f.label t('activerecord.models.line.one').upcase, required: false, class: 'control-label'
/       = f.input :associated_lines_id_eq, as: :select, collection: @workbench.lines.includes(:company_light, :line_referential).order(:name), input_html: { 'data-select2ed': 'true', 'data-select2ed-placeholder': t('referentials.filters.line') }, label: false, label_method: :full_display_name, wrapper_html: { class: 'select2ed'}

/     .form-group.togglable class=filter_item_class(params[:q], :state)
/       = f.label Referential.human_attribute_name(:status), required: false, class: 'control-label'
/       .form-group.checkbox_list
/         - Referential::STATES.each do |s|
/           = f.input "state[#{s}]", input_html: {checked: (params[:q] && params[:q][:state] && params[:q][:state][s]) == "1"}, label: ("<span class='flex items-center m-0'><p class='m-0 mr-auto'>#{"referentials.states.#{s}".t}</p>#{icon_for_referential_state(s)}</span>").html_safe, as: :boolean, wrapper_html: { class: 'checkbox-wrapper' }

/     .form-group.togglable class=filter_item_class(params[:q], :workbench_name_eq_any)
/       = f.label t('activerecord.models.workbench.one'), required: false, class: 'control-label'
/       = f.input :workbench_name_eq_any,
/           collection: @workbench.workgroup.workbenches.order('name').pluck(:name),
/           as: :check_boxes,
/           label: false,
/           label_method: lambda { |w| ("<span>#{w}</span>").html_safe },
/           required: false,
/           wrapper_html: { class: 'checkbox_list' }

/     .form-group.togglable class=filter_item_class(params[:q], :validity_period)
/       = f.label Referential.human_attribute_name(:validity_period), required: false, class: 'control-label'
/       .filter_menu
/         = f.simple_fields_for :validity_period do |p|
/           = p.input :start_date, as: :date, label: t('simple_form.from'), wrapper_html: { class: 'date smart_date filter_menu-item' }, default: @begin_range, include_blank: @begin_range ? false : true
/           = p.input :end_date, as: :date, label: t('simple_form.to'), wrapper_html: { class: 'date smart_date filter_menu-item' }, default: @end_range, include_blank: @end_range ? false : true

/   .actions
/     = link_to t('actions.erase'), @workbench, class: 'btn btn-link'
/     = f.submit t('actions.filter'), class: 'btn btn-default', id: 'referential_filter_btn'